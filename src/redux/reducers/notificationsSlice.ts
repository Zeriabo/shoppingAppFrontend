import {
  createAsyncThunk,
  createSlice,
  current,
  PayloadAction,
} from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../app/store";
import { ICategories, INotification } from "../../types/types";
import { BlobOptions } from "buffer";

const initialState: INotification = {
  text: undefined,
  open: false,
  severity: undefined,
};

export const NotificationSlice = createSlice({
  name: "NotificationSlice",
  initialState: initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOpen(state: INotification, action: PayloadAction<any>) {
      state.open = action.payload;
    },
    setText(state: any, action: PayloadAction<any>) {
      state.text = action.payload;
    },
    setSeverity(state: INotification, action: PayloadAction<any>) {
      state.severity = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: () => {},
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectOpen = (state: INotification) => state.open;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const { setOpen, setText, setSeverity } = NotificationSlice.actions;

export default NotificationSlice.reducer;
