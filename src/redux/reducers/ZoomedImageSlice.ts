import {
  createAsyncThunk,
  createSlice,
  current,
  PayloadAction,
} from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../app/store";
import { ICategories } from "../../types/types";

const initialState: any = {
  title: "",
  zoomedpic: "",
  description: "",
  zoom: false,
  discount: 0,
  price: 0,
  category: "",
};

export const ZoomedImageSlice = createSlice({
  name: "zoomedImageSlice",
  initialState: initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setZoomedImage(state: any, action: PayloadAction<any>) {
      state.zoomedpic = action.payload.image;
      state.description = action.payload.description;
      state.title = action.payload.title;
      state.discount = action.payload.discount;
      state.price = action.payload.price;
      state.category = action.payload.category;
      state.zoom = true;
    },
    setZoomedImageOut(state: any) {
      state.zoomedpic = "";
      state.zoom = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: () => {},
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectZoomedImage = (state: any) => state.zoomedpic;
export const selectIfZoomed = (state: any) => state.zoom;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const { setZoomedImage, setZoomedImageOut } = ZoomedImageSlice.actions;
export default ZoomedImageSlice.reducer;
